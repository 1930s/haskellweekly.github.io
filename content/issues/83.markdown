<!-- 2017-11-30 -->

Welcome to another issue of Haskell Weekly!
Haskell is a safe, purely functional programming language with a fast, concurrent runtime.
This is a weekly summary of what's going on in its community.

## Featured

-   [Monad of no `return` proposal](https://ghc.haskell.org/trac/ghc/wiki/Proposal/MonadOfNoReturn?version=22)

    > To complete the `Monad`-hierarchy refactoring started with AMP (& MFP) and unify `return`/`pure` & `>>`/`*>`, move `Monad(return)` and `Monad((>>))` methods out of the `Monad` class into top-level bindings aliasing `Applicative(pure)` and `Applicative((*>))` respectively.

-   [Hamiltonian dynamics in Haskell](https://blog.jle.im/entry/hamiltonian-dynamics-in-haskell.html)

    > At the end of this, we should be able to have Haskell automatically generate equations of motions for any arbitrary system described in arbitrary coordinate systems, and simulate that system.

-   [Haskell exceptions and FFI wrappers](https://neilmitchell.blogspot.com/2017/11/haskell-exceptions-and-ffi-wrappers.html)

    > The Haskell FFI is incredibly powerful, allowing you to convert Haskell functions into C function pointers. In this post I'll give a quick example, then go into what happens if the Haskell function throws an exception.

-   [Exception handling in Haskell jobs](https://medium.com/lazy-eval/exception-handling-in-haskell-jobs-383835fb73e6)

    > I am using yesod-job-queue to define the `job`. The use-case was, that this was a scheduled job and we needed to log the failures. But on running this; there was an error, since `runJob` in yesod-job-queue does not have the `MonadCatch` constraint.

-   [Bracket: A tale of partially applied functions](https://alternativebit.fr/posts/haskell/bracket/)

    > In this post, we describe how we can use partially applied functions as a design building block though the study of a practical example: the `bracket` function.

## Jobs

-   [Capital Match is seeking a Software Engineer in Singapore](https://functionaljobs.com/jobs/9053-software-engineer-haskell-full-stack-at-capital-match)

    > We are looking for experienced developers to lead our tech growth in the Fintech space, expand into surrounding countries and develop new products on the platform.

## In brief

-   [Building slim Docker images for Haskell applications](https://futtetennismo.me/posts/docker/2017-11-24-docker-haskell-executables.html)

## Package of the week

This week's package of the week is [Validity](https://hackage.haskell.org/package/validity-0.4.0.2),
a library that makes invariants explicit by providing a function to check whether the invariants hold.

## Call for participation

-   [dejafu: Add a testPropertyFor to {hunit,tasty}-dejafu](https://github.com/barrucadu/dejafu/issues/159)
-   [persistent: Provide scripts to reproduce errors for each backend](https://github.com/yesodweb/persistent/issues/746)

Check out [24 Pull Requests](https://24pullrequests.com/languages/haskell) for some additional Haskell projects to work on!

## Events

-   November 30: HaskellerZ: [Tom Sydney Kerckhove: An overview of validity based testing](https://www.meetup.com/HaskellerZ/events/245248358/)
-   December 1: Austin Types, Theorems, and Programming Languages: [Going through Software Foundations by Benjamin Pierce et al](https://www.meetup.com/Austin-Types-Theorems-and-Programming-Languages/events/245019617/)
-   December 2: [FPConf 2017](https://www.meetup.com/Functional-programming-Moscow-Tech-Meetup/events/244760125/)
-   December 4: [YOW 2017](https://www.meetup.com/Brisbane-Functional-Programming-Group/events/244438498/)
-   December 5: LA PureScript: [Nathan Faubion on Async Programming in PureScript](https://www.meetup.com/LA-PureScript/events/244935247/)
-   December 6: Berlin Functional Programming Group: [FP Forum: Learn, Teach, Share, Grow](https://www.meetup.com/Berlin-Functional-Programming-Group/events/244991423/)
-   December 7: Haskell.SG: [December Meetup](https://www.meetup.com/HASKELL-SG/events/244959310/)
