<!-- 2017-08-10 -->

Welcome to another issue of Haskell Weekly!
Haskell is a purely functional programming language that focuses on correctness, productivity, and expressiveness.
This is a weekly summary of what's going on in its community.

## Featured

-   [Wish: A trivial web browser written in Haskell](https://github.com/chrisdone/wish/blob/f6cb6ffa38e88a8fa082b2cff33c2da56c249608/README.md)

    > This is a demonstration program that is able to load a web page up and render it like in the early '90s. It supports laying out text, different font sizes for headings, inline and block elements, hyperlinks, bold and italics. It supports mouse wheel scrolling, too.

-   [Array programming in Haskell](https://www.tweag.io/posts/2017-08-09-array-programming-in-haskell.html)

    > On the confusing side, there are several different array libraries with overlapping feature sets, but distinct focus, strengths, and level of support, and often they have got widely different performance characteristics. This can make it hard to know where to start.

-   [Programming as if the correct data structure (and performance) mattered](http://h2.jaguarpaw.co.uk/posts/data-structures-matter/)

    > What if focusing on the correct data structure, while still understanding your algorithm, could improve maintainability and collaterally speed up execution by a factor of over 15x compared to over-engineered C# code?

-   [5 ways to manage allocated memory in Haskell](https://ro-che.info/articles/2017-08-06-manage-allocated-memory-haskell)

    > Let's say we have a foreign function that takes a C data structure. Our task is to allocate the structure in memory, fill in the fields, call the function, and deallocate the memory. In this article, I will explore different ways to track all the allocated pointers and free them reliably.

-   [Why libuv, why multicore?](https://github.com/winterland1989/stdio/wiki/Why-libuv,-why-multicore%3F/b8fe3ae9f04ed1e0e9f614939da0896087e63003)

    > Alright, so I finally got time to explain the whole I/O system in stdio. The code is not production ready yet, but the big framework has been laid out. Once we figure out a way to bridge libuv with GHC's light weight threads runtime, we got everything we want.

## Jobs

todo

## In brief

todo

## Package of the week

This week's package of the week is [monad-control](https://www.stackage.org/haddock/nightly-2017-08-10/monad-control-1.0.2.2/Control-Monad-Trans-Control.html),
a library that provides lift control operations (like exception catching) through monad transformers.

## Call for participation

-   [brittany: Quadratic run-time behaviour in size of input](https://github.com/lspitzner/brittany/issues/34)
-   [cabal: Wiki release instructions are out of date](https://github.com/haskell/cabal/issues/4622)
-   [stack: Add `--cwd` parameter to stack exec](https://github.com/commercialhaskell/stack/issues/3264)

## Events

todo
